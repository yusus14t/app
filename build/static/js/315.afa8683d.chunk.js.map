{"version":3,"file":"static/js/315.afa8683d.chunk.js","mappings":"4NAyCA,UAjCA,SAAgBA,IAAOC,EAAAA,EAAAA,GAAAD,GACrB,IAAAE,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAA8BL,EAAAA,EAAAA,UAAS,CAAC,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACnBG,GAAWC,EAAAA,EAAAA,MACXC,EAAc,IAAIC,gBAAgBH,EAASI,QAAQC,IAAI,WAE7DC,EAAAA,EAAAA,YAAU,WACRC,GACF,GAAG,CAACT,IAEJ,IAAMS,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEGC,EAAAA,GAAAA,IAAkB,eAAgB,CAACC,OAAQ,CAAEC,UAAU,EAAMjB,OAAQF,EAAaJ,OAAAA,KAAW,KAAD,EAAAe,EAAAG,EAAAM,KAA3GR,EAAID,EAAJC,KACNnB,EAAe,OAAJmB,QAAI,IAAJA,OAAI,EAAJA,EAAMpB,SAASsB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAE1BQ,QAAQC,MAAKT,EAAAO,IAAQ,yBAAAP,EAAAU,OAAA,GAAAd,EAAA,kBAExB,kBAPkB,OAAAJ,EAAAmB,MAAA,KAAAC,UAAA,KASnB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAAAC,SAAA,EACRC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,MAAOhC,EAAW,YAAAiC,OAAgBjC,GAAgB,UAAYkC,SAAU,SAAEtB,GAAI,OAAMf,EAAUe,EAAK,KAC3GkB,EAAAA,EAAAA,KAAA,OAAKK,UAAU,gBAAeN,SAC1BrC,EAAQ4C,QACR5C,EAAQ6C,KAAI,SAACC,EAAQC,GAAG,OACtBT,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACF,OAAQA,GAAaC,EAAO,QAMpD,C","sources":["components/webcomponents/Clinics.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { axiosInstance } from \"../../constants/utils\";\nimport ClinicCard from \"../App/cards/ClinicCard\";\nimport Container from \"../../layout/Container\";\nimport { useLocation } from \"react-router-dom\";\nimport Filter from \"../App/Pages/Filter\";\n\n\nfunction Clinics({  }) {\n  const [clinics, setClinics] = useState([]);\n  const [ filter, setFilter ] = useState({});\n  const location = useLocation();\n  const searchQuery = new URLSearchParams(location.search).get('search')\n\n  useEffect(() => {\n    getAllClinics();\n  }, [filter, ]);\n\n  const getAllClinics = async () => {\n    try {\n      let { data } = await axiosInstance.get(\"/all-clinics\", {params: { isClinic: true, search: searchQuery, filter }});\n      setClinics(data?.clinics);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Container>\n      <Filter title={searchQuery ? `Search : ${ searchQuery}` : 'Clinics' } callback={( data ) => setFilter(data) } />\n      <div className=\"row mx-0 px-0\">\n        { clinics.length &&\n          clinics.map((clinic, key) =>\n            <ClinicCard clinic={clinic} key={key} />\n          )\n        }\n      </div>\n    </Container>\n  );\n}\n\nexport default Clinics;\n"],"names":["_ref","_objectDestructuringEmpty","_useState","useState","_useState2","_slicedToArray","clinics","setClinics","_useState3","_useState4","filter","setFilter","location","useLocation","searchQuery","URLSearchParams","search","get","useEffect","getAllClinics","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axiosInstance$","data","wrap","_context","prev","next","axiosInstance","params","isClinic","sent","t0","console","error","stop","apply","arguments","_jsxs","Container","children","_jsx","Filter","title","concat","callback","className","length","map","clinic","key","ClinicCard"],"sourceRoot":""}